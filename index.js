require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const schedule = require("node-schedule");
const mongoose = require("mongoose");
const app = express();
const bot = new TelegramBot(process.env.botTOKEN, {
  polling: true,
});
const botModel = require("./models/bot");
const userModel = require("./models/user");
const delay = require("delay");
const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
dayjs.extend(utc);
dayjs.extend(timezone);
const docxTables = require("./docx-tables.js");

// Constants
const timeList = ["05:00", "06:00", "18:00", "19:00", "20:00"];
const classList = generateClassList();
const removeKeyboard = {
  parse_mode: "HTML",
  reply_markup: { remove_keyboard: true },
};

// Connect to MongoDB
mongoose
  .connect(process.env.MONGODB)
  .then(() => console.log("Connected to MongoDB"))
  .catch((err) => console.log(err));

// Server setup
app.use(express.json());
app.get("/", (req, res) => res.send("Hello World"));
app.listen(process.env.PORT, () => {
  console.log(`Server is listening at http://localhost:${process.env.PORT}`);
  loadSchedule();
});

// Telegram Bot setup
let answerCallbacks = {};
bot.onText(/\/start/, handleStartCommand);
bot.onText(/\/tkb (.+)/, handleTkbCommand);
bot.on("document", handleDocument);
bot.onText(/\/changetime/, handleChangeTimeCommand);
bot.onText(/\/changeclass/, handleChangeClassCommand);
bot.on("callback_query", handleCallbackQuery);
bot.onText(/\/help/, handleHelpCommand);
bot.on("message", handleMessage);

// Helper functions
function generateClassList() {
  let c = [];
  for (let i = 0; i <= 2; i++) {
    for (let j = 1; j <= 8; j++) {
      c.push(`1${i}A${j}`);
    }
  }
  return c;
}

async function handleStartCommand(msg) {
  const chatId = msg.chat.id;
  let userData = await userModel.findOne({
    chatId: chatId,
  });
  if (userData) {
    return bot.sendMessage(
      chatId,
      `T·ªõ s·∫Ω g·ª≠i th·ªùi kh√≥a bi·ªÉu c·ªßa l·ªõp <b>${userData.className}</b> cho b·∫°n v√†o l√∫c <b>${userData.time}</b>`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: userData.enable ? "T·∫Øt th√¥ng b√°o" : "B·∫≠t th√¥ng b√°o",
                callback_data: userData.enable ? "disable" : "enable",
              },
            ],
          ],
        },
      }
    );
  }
  bot.sendMessage(chatId, "H√£y ·∫•n n√∫t <b>ƒêƒÉng k√Ω</b> ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng!", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "ƒêƒÉng k√Ω",
            callback_data: "register",
          },
        ],
      ],
    },
    parse_mode: "HTML",
  });
}

async function handleTkbCommand(msg, match) {
  const chatId = msg.chat.id;
  let className = match[1].split(" ")[0].toUpperCase();
  let day = match[1].split(" ")[1] || "none";
  if (day != "none" && !/[2-7]/g.test(day)) {
    return bot.sendMessage(
      chatId,
      "Hmm, c√≥ v·∫ª th·ª© m√† b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá, h√£y th·ª≠ nh·∫≠p ƒë√∫ng c√∫ ph√°p /tkb (t√™n l·ªõp) (th·ª© 2-7)\n<b>V√≠ d·ª•</b>: /tkb 10A5 2",
      {
        parse_mode: "HTML",
      }
    );
  }
  let content = "";
  let botData = await botModel.findOne({
    botId: "remaibot",
  });
  if (!botData) {
    botData = await generateBotData();
  }
  if (Object.keys(botData.datas).length == 0) {
    return bot.sendMessage(
      chatId,
      "Hmm, c√≥ v·∫ª d·ªØ li·ªáu c·ªßa t·ªõ ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠p, h√£y th·ª≠ l·∫°i sau nh√©!",
      {
        parse_mode: "HTML",
      }
    );
  }
  if (!classList.includes(className)) {
    return bot.sendMessage(
      chatId,
      "Hmm, c√≥ v·∫ª t√™n l·ªõp m√† b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá, h√£y th·ª≠ nh·∫≠p ƒë√∫ng c√∫ ph√°p \n/tkb (t√™n l·ªõp) (th·ª© 2-7)\n<b>V√≠ d·ª•</b>: /tkb 10A5 2",
      {
        parse_mode: "HTML",
      }
    );
  }
  try {
    if (/(10|11|12)A[1-8]/.test(className)) {
      className = className.match(/(10|11|12)A[1-8]/g)[0];
      content += `<b>Th·ªùi kh√≥a bi·ªÉu l·ªõp ${className}</b>\n`;
      content += `<b>D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠p nh·∫≠t v√†o l√∫c</b>: ${dayjs(
        botData.updatedAt
      )
        .tz("Asia/Ho_Chi_Minh")
        .format("HH:mm DD/MM/YYYY")}\n\n`;
      if (/[2-7]/.test(day)) {
        day = day.match(/[2-7]/g)[0];
        content += `‚Äî‚Äî‚Äî‚Äî <b>Th·ª© ${day}</b> ‚Äî‚Äî‚Äî‚Äî\n`;
        content += botData.datas[className][day]
          .map((e, i) => `Ti·∫øt ${i + 1} - ${e}`)
          .join("\n");
        bot.sendMessage(chatId, content, {
          parse_mode: "HTML",
        });
      } else {
        Object.keys(botData.datas[className]).forEach((day) => {
          content +=
            `‚Äî‚Äî‚Äî‚Äî <b>Th·ª© ${day}</b> ‚Äî‚Äî‚Äî‚Äî` +
            "\n" +
            botData.datas[className][day]
              .map((e, i) => `Ti·∫øt ${i + 1} - ${e}`)
              .join("\n") +
            "\n\n";
        });
        bot.sendMessage(chatId, content, {
          parse_mode: "HTML",
        });
      }
    } else {
      return bot.sendMessage(
        chatId,
        "Hmm, c√≥ v·∫ª t√™n l·ªõp m√† b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá, h√£y th·ª≠ nh·∫≠p ƒë√∫ng c√∫ ph√°p /tkb (t√™n l·ªõp) (th·ª© 2-7)\n<b>V√≠ d·ª•</b>: /tkb 10A5 2",
        {
          parse_mode: "HTML",
        }
      );
    }
  } catch (err) {
    console.log(err);
    return bot.sendMessage(
      chatId,
      "Hmm, c√≥ v·∫ª d·ªØ li·ªáu c·ªßa t·ªõ ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠p, h√£y th·ª≠ l·∫°i sau nh√©!",
      {
        parse_mode: "HTML",
      }
    );
  }
}

async function handleDocument(msg) {
  const chatId = msg.chat.id;
  if (chatId != process.env.OWNER_ID) {
    return;
  }
  const fileId = msg.document.file_id;
  const file = await bot.getFile(fileId);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.botTOKEN}/${file.file_path}`;
  try {
    let _msg = await bot.sendMessage(chatId, "‚åõ ƒêang c·∫≠p nh·∫≠p d·ªØ li·ªáu m·ªõi...");
    const data = await docxTables({
      file: fileUrl,
    });
    let botData = await botModel.findOne({
      botId: "remaibot",
    });
    if (!botData) {
      botData = await generateBotData();
    }
    botData.datas = formatData(data);
    await botData.save();
    await bot.deleteMessage(chatId, _msg.message_id);
    return bot.sendMessage(chatId, "üöÄ ƒê√£ l∆∞u d·ªØ li·ªáu m·ªõi!");
  } catch (err) {
    console.error(error);
    bot.sendMessage(chatId, "C√≥ l·ªói x·∫£y ra vui l√≤ng th·ª≠ l·∫°i!");
  }
}

async function handleChangeTimeCommand(msg) {
  let userData = await userModel.findOne({
    chatId: msg.chat.id,
  });
  if (!userData) {
    return bot.sendMessage(
      msg.chat.id,
      "B·∫°n ch∆∞a ƒëƒÉng k√Ω s·ª≠ d·ª•ng, h√£y nh·∫≠p l·ªánh /start ƒë·ªÉ ƒëƒÉng k√Ω",
      {
        reply_markup: {
          keyboard: [["/start"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  }
  if (!userData.enable) {
    return bot.sendMessage(
      msg.chat.id,
      "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y v√¨ b·∫°n ƒë√£ t·∫Øt th√¥ng b√°o, h√£y s·ª≠ d·ª•ng l·ªánh /start ƒë·ªÉ b·∫≠t l·∫°i",
      {
        reply_markup: {
          keyboard: [["/start"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  }
  if (userData && userData.enable) {
    bot
      .sendMessage(
        msg.chat.id,
        "H√£y ch·ªçn th·ªùi gian m√† b·∫°n mu·ªën t·ªõ g·ª≠i th√¥ng b√°o cho b·∫°n~",
        {
          reply_markup: {
            keyboard: [timeList],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      )
      .then(() => {
        answerCallbacks[msg.chat.id] = async (answer) => {
          let time = answer.text;
          if (!timeList.includes(time))
            return bot.sendMessage(
              msg.chat.id,
              `B·∫°n hay th·ª≠ l·∫°i v·ªõi danh s√°ch th·ªùi gian h·ª£p l·ªá sau ${timeList
                .map((e) => `<b>${e}</b>`)
                .join(", ")}`,
              removeKeyboard
            );
          userData.time = time;
          await userData.save();
          return bot.sendMessage(
            msg.chat.id,
            `B·∫°n ƒë√£ thay ƒë·ªïi th√†nh c√¥ng, t·ªõ s·∫Ω g·ª≠i th·ªùi kho√° bi·ªÉu cho b·∫°n v√†o l√∫c <b>${time}</b>`,
            removeKeyboard
          );
        };
      });
  }
}

async function handleChangeClassCommand(msg) {
  let userData = await userModel.findOne({
    chatId: msg.chat.id,
  });
  if (!userData) {
    return bot.sendMessage(
      msg.chat.id,
      "B·∫°n ch∆∞a ƒëƒÉng k√Ω s·ª≠ d·ª•ng, h√£y nh·∫≠p l·ªánh /start ƒë·ªÉ ƒëƒÉng k√Ω",
      {
        reply_markup: {
          keyboard: [["/start"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  }
  if (!userData.enable) {
    return bot.sendMessage(
      msg.chat.id,
      "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y v√¨ b·∫°n ƒë√£ t·∫Øt th√¥ng b√°o, h√£y s·ª≠ d·ª•ng l·ªánh /start ƒë·ªÉ b·∫≠t l·∫°i",
      {
        reply_markup: {
          keyboard: [["/start"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  }
  bot
    .sendMessage(msg.chat.id, "H√£y ch·ªçn t√™n l·ªõp c·ªßa b·∫°n~", {
      reply_markup: {
        keyboard: [classList],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
    .then(() => {
      answerCallbacks[msg.chat.id] = async (answer) => {
        let className = answer.text.toUpperCase();
        if (!classList.includes(className))
          return bot.sendMessage(
            msg.chat.id,
            `T√™n h·ª£p c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá, h√£y th·ª≠ l·∫°i v·ªõi c√°c t√™n l·ªõp nh∆∞ sau\nVd: 10A5, 11A1, 12A1,...`,
            removeKeyboard
          );
        userData.className = className;
        await userData.save();
        return bot.sendMessage(
          msg.chat.id,
          `B·∫°n ƒë√£ thay ƒë·ªïi th√†nh c√¥ng, t·ªõ s·∫Ω g·ª≠i th√¥ng b√°o th·ªùi kho√° bi·ªÉu c·ªßa l·ªõp <b>${className}</b>`,
          removeKeyboard
        );
      };
    });
}

async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  if (data === "register") {
    await delay(200);
    bot.deleteMessage(chatId, callbackQuery.message.message_id);
    bot
      .sendMessage(
        chatId,
        "H√£y ch·ªçn th·ªùi gian m√† b·∫°n mu·ªën t·ªõ g·ª≠i th√¥ng b√°o cho b·∫°n~",
        {
          reply_markup: {
            keyboard: [timeList],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      )
      .then(() => {
        answerCallbacks[callbackQuery.message.chat.id] = async (answer) => {
          let time = answer.text;
          if (!timeList.includes(time))
            return bot.sendMessage(
              chatId,
              `B·∫°n hay th·ª≠ l·∫°i v·ªõi danh s√°ch th·ªùi gian h·ª£p l·ªá sau ${timeList
                .map((e) => `<b>${e}</b>`)
                .join(", ")}`
            );
          bot
            .sendMessage(
              callbackQuery.message.chat.id,
              "H√£y ch·ªçn t√™n l·ªõp c·ªßa b·∫°n~",
              {
                reply_markup: {
                  keyboard: [classList],
                  resize_keyboard: true,
                  one_time_keyboard: true,
                },
              }
            )
            .then(() => {
              answerCallbacks[callbackQuery.message.chat.id] = async (
                answer
              ) => {
                let className = answer.text.toUpperCase();
                if (!classList.includes(className))
                  return bot.sendMessage(
                    chatId,
                    "T√™n h·ª£p c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá, h√£y th·ª≠ l·∫°i v·ªõi c√°c t√™n l·ªõp nh∆∞ sau\nVd: 10A5, 11A1, 12A1,...",
                    removeKeyboard
                  );
                let userData = new userModel({
                  chatId: callbackQuery.message.chat.id,
                  className: className,
                  time: time,
                  enable: true,
                });
                await userData.save();
                return bot.sendMessage(
                  chatId,
                  `ƒêƒÉng k√Ω th√†nh c√¥ng!, t·ªõ s·∫Ω g·ª≠i th·ªùi kh√≥a bi·ªÉu c·ªßa l·ªõp <b>${className}</b> v√†o l√∫c <b>${time}</b> cho b·∫°n ü•∞`,
                  removeKeyboard
                );
              };
            });
        };
      });
  } else if (data == "enable") {
    bot.deleteMessage(chatId, callbackQuery.message.message_id);
    let userData = await userModel.findOne({
      chatId: chatId,
    });
    userData.enable = true;
    await userData.save();
    bot.sendMessage(chatId, "ƒê√£ b·∫≠t th√¥ng b√°o th·ªùi kho√° bi·ªÉu!");
  } else if (data == "disable") {
    bot.deleteMessage(chatId, callbackQuery.message.message_id);
    let userData = await userModel.findOne({
      chatId: chatId,
    });
    userData.enable = false;
    await userData.save();
    bot.sendMessage(chatId, "ƒê√£ t·∫Øt th√¥ng b√°o th·ªùi kho√° bi·ªÉu!");
  }
}

async function handleHelpCommand(msg) {
  const chatId = msg.chat.id;
  let content = [
    "<b>Danh s√°ch c√°c l·ªánh c·ªßa Remai~</b>\n",
    "<b>/start</b> - ƒêƒÉng k√Ω th√¥ng b√°o",
    "<b>/changeclass</b> - Thay ƒë·ªïi l·ªõp",
    "<b>/changetime</b> - Thay ƒë·ªïi th·ªùi gian",
    "<b>/help</b> - Danh s√°ch l·ªánh",
    "<b>/tkb</b> (t√™n l·ªõp) (th·ª©) - Xem th·ªùi kho√° bi·ªÉu c·ªßa l·ªõp",
  ];

  bot.sendMessage(chatId, content.join("\n"), {
    parse_mode: "HTML",
  });
}
bot.onText(/\/changeclass/, async (msg) => {});
function handleMessage(message) {
  var callback = answerCallbacks[message.chat.id];
  if (callback) {
    delete answerCallbacks[message.chat.id];
    return callback(message);
  }
}

function formatData(data) {
  let datas = {};
  for (let table of data) {
    // get class name
    for (let i = 2; i < table["0"].length; i++) {
      let className = table["0"][i].data.replace(/\n/g, "");
      datas[className] = {};
      for (let j = 2; j <= 7; j++) {
        datas[className][j] = [];
      }
    }
    // get data
    let thu = "";
    let lop = "";
    for (let i = 1; i < Object.keys(table).length; i++) {
      for (let j = 0; j < table[`${i}`].length; j++) {
        if (j == 0 && table[`${i}`][j].data != "") {
          thu = table[`${i}`][j].data.replace(/\n/g, "");
        } else if (j != 1) {
          lop = table[`0`][j].data.replace(/\n/g, "");
          if (lop != "") {
            datas[lop][thu].push(table[`${i}`][j].data.replace(/\n/g, ""));
          }
        }
      }
    }
  }
  return datas;
}

async function generateBotData() {
  let botData = await botModel.findOne({
    botId: "remaibot",
  });
  if (!botData) {
    botData = new botModel({
      botId: "remaibot",
      chatsId: [],
      datas: {},
    });
    await botData.save();
  }
  return botData;
}

async function loadSchedule() {
  console.log("Load schedule...");
  let botData = await botModel.findOne({
    botId: "remaibot",
  });
  if (!botData) return;
  const rule = new schedule.RecurrenceRule();
  rule.second = 0;
  rule.tz = "Asia/Ho_Chi_Minh";
  schedule.scheduleJob(rule, async () => {
    const currentTime = dayjs().tz("Asia/Ho_Chi_Minh").format("HH:mm");
    console.log(`Schedule: ${currentTime}`);
    const usersToNotify = await userModel.find({ time: `${currentTime}` });
    usersToNotify.forEach((user) => {
      if (!user.enable) return;
      const today = dayjs().tz("Asia/Ho_Chi_Minh").day() + 1;

      if (today == 7) return;
      const content = [
        `<b>Th√¥ng b√°o th·ªùi kh√≥a bi·ªÉu ng√†y mai c·ªßa l·ªõp ${user.className}</b>\n`,
        `‚Äî‚Äî‚Äî‚Äî <b>Th·ª© ${today + 1}</b> ‚Äî‚Äî‚Äî‚Äî`,
      ];
      content.push(
        ...datas[user.className[1]][user.className][today + 1].map(
          (e, i) => `Ti·∫øt ${i + 1} - ${e}`
        )
      );
      bot.sendMessage(user.chatId, content.join("\n"), {
        parse_mode: "HTML",
      });
    });
  });
}
